---
import HeaderLink from './HeaderLink.astro'
import { Icon } from 'astro-icon/components'
import ThemeSelector from './ThemeSelector.astro'

const links = [
  {
    display: 'Home',
    location: '/',
  },
  {
    display: 'Blog',
    location: '/blog',
  },
  {
    display: 'Projects',
    location: '/projects',
  },
  {
    display: 'Playground',
    location: '/playground',
  },
  {
    display: 'Contact',
    location: 'mailto:yash25.j@gmail.com',
  },
]
---

<header class="fixed top-0 w-full z-40">
  <nav class="bg-background text-foreground">
    <div
      class="container mx-auto flex px-6 justify-between items-center py-5 sm:px-20 2xl:px-16"
    >
      <h2>
        <a href="/" class="text-foreground">
          <img src="/newlogo.svg" alt="YJ." class="h-7" />
        </a>
      </h2>
      <div class="gap-12 hidden md:flex items-center">
        {
          links.map((link) => (
            <HeaderLink class="text-lg" href={link.location}>
              {link.display}
            </HeaderLink>
          ))
        }
      </div>
      <button class="md:hidden" id="nav-open-btn">
        <Icon name="mdi:menu" size={32} />
      </button>

      <!-- Mobile nav -->
      <div
        class="translate-x-full fixed top-0 right-0 bg-white shadow-xl dark:bg-neutral-900 h-screen w-5/6 px-8 py-6 transition-transform z-40 border-l-[1px] border-background"
        id="mobile-menu"
      >
        <button id="nav-close-btn" class="ml-auto block">
          <Icon name="mdi:close" size={32} />
        </button>
        <div class="flex flex-col h-full items-start gap-8 pt-16">
          {
            links.map((link) => (
              <HeaderLink class="text-4xl font-light" href={link.location}>
                {link.display}
              </HeaderLink>
            ))
          }
          <ThemeSelector class:list="mt-4" />
        </div>
      </div>
    </div>
  </nav>
  <!-- 
  <style lang="css">
    [data-icon] {
      width: 26px;
    }
  </style> -->

  <script>
    function toggleNav() {
      document
        .querySelector('#mobile-menu')
        ?.classList.toggle('translate-x-full')
    }

    document
      .querySelector('#nav-open-btn')
      ?.addEventListener('click', toggleNav)
    document
      .querySelector('#nav-close-btn')
      ?.addEventListener('click', toggleNav)
  </script>
</header>

<script is:inline>
  function reComputeTheme() {
    console.log('Ran reComputeTheme')
    if (
      localStorage.theme === 'dark' ||
      (!('theme' in localStorage) &&
        window.matchMedia('(prefers-color-scheme: dark)').matches)
    ) {
      document.documentElement.classList.add('dark')
    } else {
      document.documentElement.classList.remove('dark')
    }

    let theme = localStorage.theme || 'auto'
    document
      .querySelectorAll(`[data-theme="theme-${theme}"]`)
      .forEach((el) => el.classList.add('active'))
  }

  function addThemeEventListeners() {
    console.log('Ran addThemeEventListeners')
    themeButtons = document.querySelectorAll('.theme-button')
    console.log(themeButtons.length)
    themeButtons.forEach((button) => {
      button.addEventListener('click', () => {
        themeButtons.forEach((btn) => btn.classList.remove('active'))
        button.classList.add('active')
        if (button.dataset.theme === 'theme-auto') {
          localStorage.removeItem('theme')
          reComputeTheme()
        } else {
          localStorage.theme = button.dataset.theme.replace('theme-', '')
          document.documentElement.classList.toggle(
            'dark',
            button.dataset.theme === 'theme-dark'
          )
        }
      })
    })
  }

  // Set active class on OS theme change
  window
    .matchMedia('(prefers-color-scheme: dark)')
    .addEventListener('change', (e) => {
      reComputeTheme()
    })

  // run recomputeTheme when screen crosses 768px
  window.matchMedia('(min-width: 768px)').addEventListener('change', (e) => {
    addThemeEventListeners()
    reComputeTheme()
  })

  reComputeTheme()

  // Run on page load
  window.addEventListener('DOMContentLoaded', () => {
    addThemeEventListeners()
    reComputeTheme()
  })
</script>
